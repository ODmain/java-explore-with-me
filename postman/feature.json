{
  "info": {
    "_postman_id": "1c15eb28-81e4-4382-a52d-765da805bd58",
    "name": "\"Explore with me\" comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "34596938"
  },
  "item": [
    {
      "name": "create user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Test user 'email' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email, '\"email\" must be \"user@ymail.com\"').to.eql('user@ymail.com');\r",
              "});\r",
              "pm.test(\"Test user 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"User\"').to.eql('User');\r",
              "});\r",
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has user create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"user@ymail.com\",\r\n    \"name\": \"User\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "create user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Test user 'email' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email, '\"email\" must be \"user2@ymail.com\"').to.eql('user2@ymail.com');\r",
              "});\r",
              "pm.test(\"Test user 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"User2\"').to.eql('User2');\r",
              "});\r",
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has user create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"user2@ymail.com\",\r\n    \"name\": \"User2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "create category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has category create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test category 'name' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('name');\r",
              "    pm.expect(jsonData.name, '\"name\" must be \"bbbb\"').to.eql('bbbb');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"name\": \"bbbb\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/categories",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "create event",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has user create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'annotation' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('annotation');\r",
              "    pm.expect(jsonData.annotation, '\"annotation\" must be \"event annotation annotation\"').to.eql('event annotation annotation');\r",
              "});\r",
              "pm.test(\"Test event 'category.id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('category');\r",
              "    pm.expect(jsonData.category).to.have.property('id');\r",
              "    pm.expect(jsonData.category.id, '\"category.id\"  must be \"1\"').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test event 'confirmedRequests' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
              "    pm.expect(jsonData.confirmedRequests, '\"confirmedRequests\" must be 0').to.eql(0);\r",
              "});\r",
              "pm.test(\"Test event 'description' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('description');\r",
              "    pm.expect(jsonData.description, '\"description\" must be \"event description description\"').to.eql('event description description');\r",
              "});\r",
              "pm.test(\"Test event 'initiator.id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('initiator');\r",
              "    pm.expect(jsonData.initiator).to.have.property('id');\r",
              "    pm.expect(jsonData.initiator.id, '\"initiator.id\"  must be \"1\"').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test event 'paid' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('paid');\r",
              "    pm.expect(jsonData.paid, '\"paid\" must be \"false\"').to.eql(false);\r",
              "});\r",
              "pm.test(\"Test event 'participantLimit' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('participantLimit');\r",
              "    pm.expect(jsonData.participantLimit, '\"participantLimit\" must be 0').to.eql(0);\r",
              "});\r",
              "pm.test(\"Test event 'requestModeration' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('requestModeration');\r",
              "    pm.expect(jsonData.requestModeration, '\"requestModeration\" must be \"false\"').to.eql(false);\r",
              "});\r",
              "pm.test(\"Test event 'state' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('state');\r",
              "    pm.expect(jsonData.state, '\"state\" must be \"PENDING\"').to.eql('PENDING');\r",
              "});\r",
              "pm.test(\"Test event 'title' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title, '\"event title\"').to.eql('event title');\r",
              "});\r",
              "pm.test(\"Test event 'views' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('views');\r",
              "    pm.expect(jsonData.views, '\"views\" must be 0').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"annotation\": \"event annotation annotation\",\r\n    \"category\": 1,\r\n    \"description\": \"event description description\",\r\n    \"eventDate\": \"2027-12-23 12:00:00\",\r\n    \"location\": {\r\n        \"lat\": 59.9386,\r\n        \"lon\": 30.3141\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": false,\r\n    \"title\": \"event title\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "update event state",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has user create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'state' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('state');\r",
              "    pm.expect(jsonData.state, '\"state\" must be \"PUBLISHED\"').to.eql('PUBLISHED');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "create comment by user 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Comment to event\"').to.eql('Comment to event');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Comment to event\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/private/comments/:eventId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":eventId",
            ":userId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            },
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "create comment by user 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Comment to event by user 2\"').to.eql('Comment to event by user 2');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Comment to event by user 2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/private/comments/:eventId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":eventId",
            ":userId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            },
            {
              "key": "userId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "create comment empty text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/private/comments/:eventId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":eventId",
            ":userId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            },
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'id' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Updated Comment to event by user\"').to.eql('Updated Comment to event by user');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Updated Comment to event by user\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/private/comments/:commentId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":commentId",
            ":userId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            },
            {
              "key": "userId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment not owner",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 409\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Updated Comment to event by user\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/private/comments/:commentId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":commentId",
            ":userId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            },
            {
              "key": "userId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test comment 'text' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('text');\r",
              "    pm.expect(jsonData.text, '\"text\" must be \"Updated Comment to event by admin\"').to.eql('Updated Comment to event by admin');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Updated Comment to event by admin\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/comments/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "get all comments by user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test list comment response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/private/comments/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "get all comments by admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200 or 201\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
              "});\r",
              "pm.test(\"Has comment create response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test list comment response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/comments/:eventId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "delete by admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {\r",
              "    pm.expect(pm.response.code).to.be.eq(204);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/comments/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "comments",
            ":commentId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "delete by user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {\r",
              "    pm.expect(pm.response.code).to.be.eq(204);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/private/comments/:commentId/:userId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "private",
            "comments",
            ":commentId",
            ":userId"
          ],
          "variable": [
            {
              "key": "commentId",
              "value": "2"
            },
            {
              "key": "userId",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    }
  ]
}